<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jctest</title><link>http://localhost:1313/jctest/</link><description>Recent content on jctest</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/jctest/index.xml" rel="self" type="application/rss+xml"/><item><title>Features</title><link>http://localhost:1313/jctest/api/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/jctest/api/features/</guid><description>API This framework was designed to be a (subset) replacement of the Googletest.
Features jc_test gtest ASSERT_EQ Yes Yes ASSERT_NE Yes Yes ASSERT_GT Yes Yes ASSERT_LT Yes Yes ASSERT_GE Yes Yes ASSERT_LE Yes Yes ASSERT_ARRAY_EQ Yes No ASSERT_ARRAY_EQ_LEN Yes No ASSERT_STREQ Yes Yes ASSERT_STRNE Yes Yes ASSERT_NEAR Yes Yes ASSERT_DEATH Yes Yes ASSERT_FLOAT_EQ No*  Yes ASSERT_DOUBLE_EQ No*  Yes ASSERT_TRUE Yes Yes ASSERT_FALSE Yes Yes EXPECT_* variants Yes Yes TEST Yes Yes TEST_F Yes Yes TEST_P Yes Yes TYPED_TEST** Yes Yes</description></item><item><title>Assertions</title><link>http://localhost:1313/jctest/api/01-assertions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/jctest/api/01-assertions/</guid><description>There are two main types of assertions: fatal (ASSERT_*) and non-fatal (EXPECT_*).
The general format of each assertion is that the expected value is to the left, and the value to test is on the right. This is good to know so that the error reporting doesn&amp;rsquo;t get confusing.
ASSERT_EQ(expected, actual); Boolean checks
Fatal Non fatal Expression True ASSERT_TRUE(V) EXPECT_TRUE(V) V is TRUE False ASSERT_FALSE(V) EXPECT_FALSE(V) !</description></item><item><title>Test Cases</title><link>http://localhost:1313/jctest/api/02-testcases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/jctest/api/02-testcases/</guid><description>Test Fixtures TEST(FixtureName, TestName) Tests a single function.
TEST(MyTest, TestName) { ASSERT_EQ(4, 2*2); ASSERT_STREQ(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;); } TEST_F(FixtureName, TestName) Uses a base class:
struct MyTest : public jc_test_base_class { static void SetUpTestCase() {}; static void TearDownTestCase() {}; void SetUp() {}; void TearDown() {}; }; TEST_F(MyTest, TestName) { ASSERT_EQ(4, 2*2); ASSERT_STREQ(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;); } TEST_P + INSTANTIATE_TEST_CASE_P Using a templated base class which accepts a parameter type, it&amp;rsquo;s easy to use a test case with multiple values.</description></item><item><title>Runtime</title><link>http://localhost:1313/jctest/api/03-runtime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/jctest/api/03-runtime/</guid><description>Command line options --test-filter &amp;lt;substring&amp;gt; If the substring matches part of the full test name, the test will be included. The non matching tests will be skipped.
The complete name isn&amp;rsquo;t written out during the tests, but is pieced together from the components making up the test. E.g.:
FirstParamsTest/ParamsTest.Test/0 FirstParamsTest/ParamsTest.Test/1 SecondParamsTest/ParamsTest.Test/0 SecondParamsTest/ParamsTest.Test/1 Fixture name Test case name Test name Test number (for parameterized tests) Given the tests above, the option --test-filter Second will match:</description></item><item><title>Customization</title><link>http://localhost:1313/jctest/api/customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost:1313/jctest/api/customization/</guid><description>Custom type formatting It&amp;rsquo;s beneficial to be able to convert your custom types to a human readable string. If your type doesn&amp;rsquo;t match any of the supported types, it will default to the &amp;quot;?&amp;quot; output, which isn&amp;rsquo;t very helpful.
All that is needed it to make a function available for the template matching to find it.
Here is an example that takes a custom enum and converts that to a readable output:</description></item><item><title>About</title><link>http://localhost:1313/jctest/about/</link><pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate><guid>http://localhost:1313/jctest/about/</guid><description>You can read in more detail about this library came to be in the blog post: Replacing googletest with jctest
Hi there, you just reached my blog.
int a = 0; void foo(int* b) { *b = a; } typedef struct jc_test_entry { jc_test_entry* next; // linked list const char* name; jc_test_base_class* instance; jc_test_factory_base_interface* factory; // Factory for parameterized tests uint32_t fail:1; uint32_t skipped:1; uint32_t :30; #if defined(__x86_64__) || defined(__ppc64__) || defined(_WIN64) uint32_t :32; #endif } jc_test_entry;</description></item></channel></rss>